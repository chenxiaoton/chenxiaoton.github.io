<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1-plus</title>
    <url>/2023/04/27/1-plus/</url>
    <content><![CDATA[<p>第二次的第一次</p>
<p><img src="/2023/04/27/1-plus/q.jpg" alt="steam"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>如何在qq群里部署chat</title>
    <url>/2023/05/03/chat/</url>
    <content><![CDATA[<p>本篇主要讲的是mirai和go-cqhttp在windos下的部署</p>
<h1 id="第一个Mirai（风险较大，可用时间不长）："><a href="#第一个Mirai（风险较大，可用时间不长）：" class="headerlink" title="第一个Mirai（风险较大，可用时间不长）："></a>第一个Mirai（风险较大，可用时间不长）：</h1><p>首先我们先在</p>
<p><a href="https://github.com/lss233/chatgpt-mirai-qq-bot/releases">Releases · lss233&#x2F;chatgpt-mirai-qq-bot (github.com)</a></p>
<p>下载最新的压缩包解压(在Assets第一个下载即可)</p>
<p><img src="/2023/05/03/chat/1.png" alt="1"></p>
<p>下载打开之后是这样的<img src="/2023/05/03/chat/2.png" alt="2"></p>
<p>首先我们点击启动初始化.cmd初始化之后Enter即可，随后，一个记事本会被弹出，这是初始化程序想让你填写配置文件，不用管他照样退出，不要被别人支配（在这里填写也行，但是我没成功），随后在chatgpt&#x2F;config.cfg进行配置，这里出现的问题很多，有的问题我也没解决，所以直接用我这个（记住qq一定要用小号！！！）</p>
<h2 id="config-cfg"><a href="#config-cfg" class="headerlink" title="config.cfg"></a>config.cfg</h2><p>[mirai]<br>qq &#x3D; 1111111111  #你的qq小号</p>
<p>manager_qq &#x3D; 2222222222  #你的qq大号</p>
<p>api_key &#x3D; “1234567890”<br>reverse_ws_host &#x3D; “0.0.0.0”<br>reverse_ws_port &#x3D; 8554</p>
<p>#下面是 mirai api http 正向连接模式</p>
<p>#使用此模式时需注释上面的反向连接模式</p>
<p>#http_url &#x3D; “<a href="http://localhost:8080/">http://localhost:8080</a>“</p>
<p>#ws_url &#x3D; “<a href="http://localhost:8080/">http://localhost:8080</a>“</p>
<p>#[openai]<br>#browserless_endpoint &#x3D; “<a href="https://bypass.duti.tech/">https://bypass.duti.tech/</a>“<br>[openai]</p>
<p>#OpenAI 相关设置</p>
<p>#自定义 ChatGPT 的 browserless 接入点</p>
<p>#自 3月9日 开始，不设置此项将无法正常使用 browserless 模式下的网页版 ChatGPT</p>
<p>browserless_endpoint &#x3D; “<a href="https://bypass.duti.tech/api/">https://bypass.duti.tech/api/</a>“</p>
<p>#自定义 OpenAI 的 API 接口基础地址</p>
<p>#通过此功能，你可以搭建一个 OpenAI 的反向代理来避免网络问题</p>
<p>#例如此项目：<a href="https://github.com/Ice-Hazymoon/openai-scf-proxy">https://github.com/Ice-Hazymoon/openai-scf-proxy</a></p>
<p>#api_endpoint &#x3D; “<a href="https://api.openai.com/v1">https://api.openai.com/v1</a>“</p>
<p>#以下是 GPT3(.5) 和 GPT4 的模型参数</p>
<p>#在使用 API 调用时有效</p>
<p>#参数具体含义可以见 <a href="https://platform.openai.com/docs/api-reference/completions/create">https://platform.openai.com/docs/api-reference/completions/create</a></p>
<p>#如果你不了解，可以保持默认</p>
<p>[openai.gpt3_params]<br>temperature &#x3D; 0.5<br>max_tokens &#x3D; 4000<br>top_p &#x3D; 1.0<br>presence_penalty &#x3D; 0.0<br>frequency_penalty &#x3D; 0.0<br>min_tokens &#x3D; 1000</p>
<p>#第一个账号</p>
<p>[[openai.accounts]]<br>mode &#x3D; “browserless”</p>
<p>#你的 OpenAI 邮箱</p>
<p>email &#x3D; “ ****************”    #账号（引号不能省略）</p>
<p>#你的 OpenAI 密码</p>
<p>password &#x3D; “****************”     #账号密码</p>
<p>#clash代理的端口号</p>
<p>proxy&#x3D;”<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a>“</p>
<p>#使用 ChatGPT Plus（plus 用户此项设置为 true 使用 legacy 模型）</p>
<p>paid &#x3D; true</p>
<p>#是否开启标题自动重命名</p>
<p>title_pattern&#x3D;”qq-{session_id}”</p>
<p>#是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容</p>
<p>auto_remove_old_conversations &#x3D; true</p>
<p>#第二个账号</p>
<p>[[openai.accounts]]</p>
<p>api_key&#x3D;”  “</p>
<p>proxy&#x3D;”<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a>“</p>
<p>[[openai.accounts]]</p>
<p>api_key&#x3D;” “</p>
<p>proxy&#x3D;”<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a>“</p>
<p>#是否开启标题自动重命名</p>
<p>title_pattern&#x3D;”qq-{session_id}”</p>
<p>#是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容</p>
<p>auto_remove_old_conversations &#x3D; true</p>
<p>#&#x3D;&#x3D;&#x3D; Poe 账号部分开始</p>
<p>#如果你没有 Poe 账号，可以直接删除这部分</p>
<p>#[poe]<br>#[[poe.accounts]]</p>
<p>#登陆 poe.com 网站后，通过开发者工具查看Cookie获取</p>
<p>#p_b &#x3D; “ “</p>
<p>#&#x3D;&#x3D;&#x3D; Poe 账号部分结束</p>
<p>[baiducloud]<br>#是否启动百度云内容安全审核<br>check &#x3D; false</p>
<p>#百度云API_KEY 24位英文数字字符串<br>baidu_api_key &#x3D; “”</p>
<p>#百度云SECRET_KEY 32位的英文数字字符串<br>baidu_secret_key &#x3D;””</p>
<p>#不合规消息自定义返回<br>illgalmessage &#x3D; “[百度云]请珍惜机器人，当前返回内容不合规”</p>
<p>[system]</p>
<p>#是否自动同意进群邀请</p>
<p>accept_group_invite &#x3D; false</p>
<p>#是否自动同意好友请求</p>
<p>accept_friend_request &#x3D; false</p>
<p>[presets]</p>
<p>#切换预设的命令： 加载预设 猫娘</p>
<p>command &#x3D; “加载预设 (\w+)”<br>loaded_successful &#x3D; “预设加载成功！”<br>scan_dir &#x3D; “.&#x2F;presets&#x2F;“</p>
<p>[presets.keywords]</p>
<p>#预设关键词 &lt;-&gt; 实际文件</p>
<p>“正常” &#x3D; “presets&#x2F;default.txt”<br>“猫娘” &#x3D; “presets&#x2F;catgirl.txt”</p>
<p>#”default” &#x3D; “presets&#x2F;default.txt” # 默认预设，开启后所有的会话都会先读这个预设，谨慎使用！</p>
<h2 id="接下来讲一下注意事项（一定要看）"><a href="#接下来讲一下注意事项（一定要看）" class="headerlink" title="接下来讲一下注意事项（一定要看）"></a>接下来讲一下注意事项（一定要看）</h2><p>1.事先说明Mirai真不建议使用，倒不是应为会更容易封qq号，而是因为我第一天弄得Mirai正常使用，第二天就登不上去了，不保险；</p>
<p>2.其实呢openai的第一个账号密码登录不建议使用，因为根本登不上，好像是因为不支持了，直接使用key，什么？key在哪里？（首先呢你得有openai账号，没有的话那你来错地方了）进入官方主界面点击Developers—API reference，随后点击</p>
<p><img src="/2023/05/03/chat/3.png" alt="3"></p>
<p>后面你肯定会了，key是“sk-”开头的，复制粘贴即可</p>
<p>3.poe账号，这是我最想吐槽的，账号很好注册，但是很容易封号，我玩这个已经封了两个了，但是这个也有优点，这里              也是重点：openai在这里用的是chatgpt-3的并不是3.5，而poe正是3.5（不过只能体验二十分钟，因为差不多就被封了）  后面的AI平台的账号我也还没注册，有空了再帮大家试试水。</p>
<p>随后就是配置Mirai（这个也有点艰难，坚持坚持）</p>
<p>首先，双击 Mirai.cmd，然后等待程序启动完毕。</p>
<p>如果你看见了红色的错误提示，无需理会。</p>
<p><img src="/2023/05/03/chat/4.png" alt="4"></p>
<p>随后在下面输入</p>
<p>login 11111111  2222222 MACOS     &#x2F;&#x2F;第一段11111111你的qq小号第二段22222222是你的密码</p>
<p>成功之后会出现<img src="/2023/05/03/chat/5.png" alt="5"></p>
<p>把我涂鸦地方的复制到浏览器上访问，先点击F12点击网络并输入verify，在通过完全滑块认证，点击最后一条信息复制粘贴即可<img src="/2023/05/03/chat/6.png" alt="6"></p>
<p><img src="/2023/05/03/chat/7.png" alt="7"></p>
<p>(点击橙色部分复制到那里即可)</p>
<p>接下来，Mirai 很有可能会让你进行短信验证。通常到了这一步的时候，你离整个项目顺利运行已经不远了。</p>
<p>看到下面这段提示后，我们输入 yes 回车。输入验证码（我就不演示了，号登不上咯）当然也可以根据提示按其他，通过手机扫码也可以啦</p>
<p>随后 Mirai 已经成功登录并接管了你机器人的 QQ。</p>
<p>接下来我们要设置自动登录</p>
<p>在窗口中输入以下几条命令：</p>
<p>autologin add 你机器人的QQ号 你机器人的QQ密码</p>
<p>autologin setConfig 你机器人的QQ号 PROTOCOL MACOS</p>
<p>这样，下次启动 Mirai 时，它就会自动登录你机器人的 QQ。</p>
<h1 id="对接-OneBot-go-cqhttp"><a href="#对接-OneBot-go-cqhttp" class="headerlink" title="对接 OneBot (go-cqhttp)"></a>对接 OneBot (go-cqhttp)</h1><p>当你会Mirai时这个就简单了（同样的套路注释前面的mirai的全部再加入onebot即可，这里我又重新写一遍config.cfg便于理解）</p>
<p>首先我们点击启动初始化.cmd初始化之后Enter即可，随后，一个记事本会被弹出，这是初始化程序想让你填写配置文件，不用管他照样退出，不要被别人支配（在这里填写也行，但是我没成功），随后在chatgpt&#x2F;config.cfg进行配置，这里出现的问题很多，有的问题我也没解决，所以直接用我这个（记住qq一定要用小号！！！）</p>
<h2 id="config-cfg-1"><a href="#config-cfg-1" class="headerlink" title="config.cfg"></a>config.cfg</h2><p>#[mirai]<br>#qq &#x3D; 1111111111  #你的qq小号</p>
<p>#manager_qq &#x3D; 2222222222  #你的qq大号</p>
<p>#api_key &#x3D; “1234567890”<br>#reverse_ws_host &#x3D; “0.0.0.0”<br>#reverse_ws_port &#x3D; 8554</p>
<p>[onebot]<br>qq&#x3D;111111111  #你的qq小号<br>manager_qq &#x3D;11111111111 #你的大号</p>
<p>reverse_ws_host &#x3D; “0.0.0.0”<br>reverse_ws_port &#x3D; 8566</p>
<p>#下面是 mirai api http 正向连接模式</p>
<p>#使用此模式时需注释上面的反向连接模式</p>
<p>#http_url &#x3D; “<a href="http://localhost:8080/">http://localhost:8080</a>“</p>
<p>#ws_url &#x3D; “<a href="http://localhost:8080/">http://localhost:8080</a>“</p>
<p>#[openai]<br>#browserless_endpoint &#x3D; “<a href="https://bypass.duti.tech/">https://bypass.duti.tech/</a>“<br>[openai]</p>
<p>#OpenAI 相关设置</p>
<p>#自定义 ChatGPT 的 browserless 接入点</p>
<p>#自 3月9日 开始，不设置此项将无法正常使用 browserless 模式下的网页版 ChatGPT</p>
<p>browserless_endpoint &#x3D; “<a href="https://bypass.duti.tech/api/">https://bypass.duti.tech/api/</a>“</p>
<p>#自定义 OpenAI 的 API 接口基础地址</p>
<p>#通过此功能，你可以搭建一个 OpenAI 的反向代理来避免网络问题</p>
<p>#例如此项目：<a href="https://github.com/Ice-Hazymoon/openai-scf-proxy">https://github.com/Ice-Hazymoon/openai-scf-proxy</a></p>
<p>#api_endpoint &#x3D; “<a href="https://api.openai.com/v1">https://api.openai.com/v1</a>“</p>
<p>#以下是 GPT3(.5) 和 GPT4 的模型参数</p>
<p>#在使用 API 调用时有效</p>
<p>#参数具体含义可以见 <a href="https://platform.openai.com/docs/api-reference/completions/create">https://platform.openai.com/docs/api-reference/completions/create</a></p>
<p>#如果你不了解，可以保持默认</p>
<p>[openai.gpt3_params]<br>temperature &#x3D; 0.5<br>max_tokens &#x3D; 4000<br>top_p &#x3D; 1.0<br>presence_penalty &#x3D; 0.0<br>frequency_penalty &#x3D; 0.0<br>min_tokens &#x3D; 1000</p>
<p>#第一个账号</p>
<p>[[openai.accounts]]<br>mode &#x3D; “browserless”</p>
<p>#你的 OpenAI 邮箱</p>
<p>email &#x3D; “ ****************”    #账号（引号不能省略）</p>
<p>#你的 OpenAI 密码</p>
<p>password &#x3D; “****************”     #账号密码</p>
<p>#clash代理的端口号</p>
<p>proxy&#x3D;”<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a>“</p>
<p>#使用 ChatGPT Plus（plus 用户此项设置为 true 使用 legacy 模型）</p>
<p>paid &#x3D; true</p>
<p>#是否开启标题自动重命名</p>
<p>title_pattern&#x3D;”qq-{session_id}”</p>
<p>#是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容</p>
<p>auto_remove_old_conversations &#x3D; true</p>
<p>#第二个账号</p>
<p>[[openai.accounts]]</p>
<p>api_key&#x3D;”  “</p>
<p>proxy&#x3D;”<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a>“</p>
<p>[[openai.accounts]]</p>
<p>api_key&#x3D;” “</p>
<p>proxy&#x3D;”<a href="http://127.0.0.1:7890/">http://127.0.0.1:7890</a>“</p>
<p>#是否开启标题自动重命名</p>
<p>title_pattern&#x3D;”qq-{session_id}”</p>
<p>#是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容</p>
<p>auto_remove_old_conversations &#x3D; true</p>
<p>#&#x3D;&#x3D;&#x3D; Poe 账号部分开始</p>
<p>#如果你没有 Poe 账号，可以直接删除这部分</p>
<p>#[poe]<br>#[[poe.accounts]]</p>
<p>#登陆 poe.com 网站后，通过开发者工具查看Cookie获取</p>
<p>#p_b &#x3D; “ “</p>
<p>#&#x3D;&#x3D;&#x3D; Poe 账号部分结束</p>
<p>[baiducloud]<br>#是否启动百度云内容安全审核<br>check &#x3D; false</p>
<p>#百度云API_KEY 24位英文数字字符串<br>baidu_api_key &#x3D; “”</p>
<p>#百度云SECRET_KEY 32位的英文数字字符串<br>baidu_secret_key &#x3D;””</p>
<p>#不合规消息自定义返回<br>illgalmessage &#x3D; “[百度云]请珍惜机器人，当前返回内容不合规”</p>
<p>[system]</p>
<p>#是否自动同意进群邀请</p>
<p>accept_group_invite &#x3D; false</p>
<p>#是否自动同意好友请求</p>
<p>accept_friend_request &#x3D; false</p>
<p>[presets]</p>
<p>#切换预设的命令： 加载预设 猫娘</p>
<p>command &#x3D; “加载预设 (\w+)”<br>loaded_successful &#x3D; “预设加载成功！”<br>scan_dir &#x3D; “.&#x2F;presets&#x2F;“</p>
<p>[presets.keywords]</p>
<p>#预设关键词 &lt;-&gt; 实际文件</p>
<p>“正常” &#x3D; “presets&#x2F;default.txt”<br>“猫娘” &#x3D; “presets&#x2F;catgirl.txt”</p>
<p>#”default” &#x3D; “presets&#x2F;default.txt” # 默认预设，开启后所有的会话都会先读这个预设，谨慎使用！</p>
<h2 id="下载go-cqhttp"><a href="#下载go-cqhttp" class="headerlink" title="下载go-cqhttp"></a>下载go-cqhttp</h2><p>你可以在这里下载最新的 go-cqhttp：<a href="https://github.com/Mrs4s/go-cqhttp/releases">https://github.com/Mrs4s/go-cqhttp/releases</a></p>
<p>下载之后解压启动，点击go-cqhttp.exe进行操作后会生成go-cqhttp.bat</p>
<p>打开后选3回车退出</p>
<h2 id="设置config-yml（go-cqhttp）"><a href="#设置config-yml（go-cqhttp）" class="headerlink" title="设置config.yml（go-cqhttp）"></a>设置config.yml（go-cqhttp）</h2><p>直接复制我的</p>
<p># go-cqhttp 默认配置文件</p>
<p>account: # 账号相关</p>
<p>  uin: 111111111111 # QQ账号</p>
<p>  password: ‘’ # 密码为空时使用扫码登录</p>
<p>  encrypt: false  # 是否开启密码加密</p>
<p>  status: 0      # 在线状态 请参考 <a href="https://docs.go-cqhttp.org/guide/config.html#%E5%9C%A8%E7%BA%BF%E7%8A%B6%E6%80%81">https://docs.go-cqhttp.org/guide/config.html#在线状态</a></p>
<p>  relogin: # 重连设置</p>
<p>​    delay: 3   # 首次重连延迟, 单位秒</p>
<p>​    interval: 3   # 重连间隔</p>
<p>​    max-times: 0  # 最大重连次数, 0为无限制</p>
<p>  # 是否使用服务器下发的新地址进行重连</p>
<p>  # 注意, 此设置可能导致在海外服务器上连接情况更差</p>
<p>  use-sso-address: true</p>
<p>  # 是否允许发送临时会话消息</p>
<p>  allow-temp-session: false</p>
<p>heartbeat:</p>
<p>  # 心跳频率, 单位秒</p>
<p>  # -1 为关闭心跳</p>
<p>  interval: 5</p>
<p>message:</p>
<p>  # 上报数据类型</p>
<p>  # 可选: string,array</p>
<p>  post-format: string</p>
<p>  # 是否忽略无效的CQ码, 如果为假将原样发送</p>
<p>  ignore-invalid-cqcode: false</p>
<p>  # 是否强制分片发送消息</p>
<p>  # 分片发送将会带来更快的速度</p>
<p>  # 但是兼容性会有些问题</p>
<p>  force-fragment: false</p>
<p>  # 是否将url分片发送</p>
<p>  fix-url: false</p>
<p>  # 下载图片等请求网络代理</p>
<p>  proxy-rewrite: ‘’</p>
<p>  # 是否上报自身消息</p>
<p>  report-self-message: false</p>
<p>  # 移除服务端的Reply附带的At</p>
<p>  remove-reply-at: false</p>
<p>  # 为Reply附加更多信息</p>
<p>  extra-reply-data: false</p>
<p>  # 跳过 Mime 扫描, 忽略错误数据</p>
<p>  skip-mime-scan: false</p>
<p>  # 是否自动转换 WebP 图片</p>
<p>  convert-webp-image: false</p>
<p>output:</p>
<p>  # 日志等级 trace,debug,info,warn,error</p>
<p>  log-level: warn</p>
<p>  # 日志时效 单位天. 超过这个时间之前的日志将会被自动删除. 设置为 0 表示永久保留.</p>
<p>  log-aging: 15</p>
<p>  # 是否在每次启动时强制创建全新的文件储存日志. 为 false 的情况下将会在上次启动时创建的日志文件续写</p>
<p>  log-force-new: true</p>
<p>  # 是否启用日志颜色</p>
<p>  log-colorful: true</p>
<p>  # 是否启用 DEBUG</p>
<p>  debug: false # 开启调试模式</p>
<p># 默认中间件锚点</p>
<p>default-middlewares: &amp;default</p>
<p>  # 访问密钥, 强烈推荐在公网的服务器设置</p>
<p>  access-token: ‘’</p>
<p>  # 事件过滤器文件目录</p>
<p>  filter: ‘’</p>
<p>  # API限速设置</p>
<p>  # 该设置为全局生效</p>
<p>  # 原 cqhttp 虽然启用了 rate_limit 后缀, 但是基本没插件适配</p>
<p>  # 目前该限速设置为令牌桶算法, 请参考:</p>
<p>  # <a href="https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/6597000?fr=aladdin">https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/6597000?fr=aladdin</a></p>
<p>  rate-limit:</p>
<p>​    enabled: false # 是否启用限速</p>
<p>​    frequency: 1  # 令牌回复频率, 单位秒</p>
<p>​    bucket: 1     # 令牌桶大小</p>
<p>database: # 数据库相关设置</p>
<p>  leveldb:</p>
<p>​    # 是否启用内置leveldb数据库</p>
<p>​    # 启用将会增加10-20MB的内存占用和一定的磁盘空间</p>
<p>​    # 关闭将无法使用 撤回 回复 get_msg 等上下文相关功能</p>
<p>​    enable: true</p>
<p>  sqlite3:</p>
<p>​    # 是否启用内置sqlite3数据库</p>
<p>​    # 启用将会增加一定的内存占用和一定的磁盘空间</p>
<p>​    # 关闭将无法使用 撤回 回复 get_msg 等上下文相关功能</p>
<p>​    enable: false</p>
<p>​    cachettl: 3600000000000 # 1h</p>
<p># 连接服务列表</p>
<p>servers:</p>
<p>  # 添加方式，同一连接方式可添加多个，具体配置说明请查看文档</p>
<p>  #- http: # http 通信</p>
<p>  #- ws:   # 正向 Websocket</p>
<p>  #- ws-reverse: # 反向 Websocket</p>
<p>  #- pprof: #性能分析服务器</p>
<p>  # 反向WS设置</p>
<p>  - ws-reverse:</p>
<p>​      # 反向WS Universal 地址</p>
<p>​      # 注意 设置了此项地址后下面两项将会被忽略</p>
<p>​      universal: ws:&#x2F;&#x2F;127.0.0.1:8566&#x2F;ws</p>
<p>​      # 反向WS API 地址</p>
<p>​      api: ws:&#x2F;&#x2F;your_websocket_api.server</p>
<p>​      # 反向WS Event 地址</p>
<p>​      event: ws:&#x2F;&#x2F;your_websocket_event.server</p>
<p>​      # 重连间隔 单位毫秒</p>
<p>​      reconnect-interval: 3000</p>
<p>​      middlewares:</p>
<p>​        &lt;&lt;: *default # 引用默认中间件</p>
<h2 id="启动go-cqhttp-bat"><a href="#启动go-cqhttp-bat" class="headerlink" title="启动go-cqhttp.bat"></a>启动go-cqhttp.bat</h2><p>首次启动go-cqhttp.bat时我们不要登录 QQ，我们只是需要它生成的 <code>device.json</code>文件。</p>
<p>然后将protocol的数值修改为2（找不到protocol的Ctrl+F搜索）</p>
<p><img src="/2023/05/03/chat/8.png" alt="8"></p>
<p>退出来再次扫码登录即可<img src="/2023/05/03/chat/9.png" alt="9"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.扫码时建议让电脑连接手机的热点，还有就是这个时候电脑不要挂梯子；</p>
<p>2.这个真的比Mirai好……;</p>
<p>3.设置反向WS Universal 地址之类的用我这个就行啦，也可以从网上查；</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>最后呢就是使用啦（超级爽）</p>
<p>1.使用go-cqhttp:打开go-cqhttp.bat和启动ChatGPT.cmd即可</p>
<p>2.使用Mirai：打开启动Mirai.cmd和和启动ChatGPT.cmd即可</p>
<p>记住要挂梯子哟！！！</p>
<p>注：本人是纯小白，肯定有错误的，看了还是不行的去网上查，我也是从网上查一步步做出来的，加油！！！！</p>
]]></content>
  </entry>
</search>
